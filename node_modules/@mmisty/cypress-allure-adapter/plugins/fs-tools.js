"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeResultFile = exports.copyTest = exports.copyAttachments = exports.waitWhileCondition = exports.copyFileCp = exports.mkdirSyncWithTry = void 0;
const fs_1 = require("fs");
const debug_1 = __importDefault(require("debug"));
const common_1 = require("../common");
const path_1 = require("path");
const debug = (0, debug_1.default)('cypress-allure:fs-tools');
const log = (...args) => {
    debug(args);
};
const mkdirSyncWithTry = (dir) => {
    if (!(0, fs_1.existsSync)(dir)) {
        for (let i = 0; i < 5; i++) {
            try {
                (0, fs_1.mkdirSync)(dir);
                return;
            }
            catch (err) {
                // ignore
                log(`Could not create dir: ${err.message}`);
            }
        }
    }
};
exports.mkdirSyncWithTry = mkdirSyncWithTry;
const copyFileCp = (from, to, isRemoveSource, callback) => {
    log(`copy file ${from} to ${to}`);
    (0, fs_1.copyFile)(from, to, err => {
        if (err) {
            log(`Error copying file: ${err.message}`);
            return;
        }
        if (isRemoveSource) {
            (0, fs_1.rm)(from, () => {
                // ignore
            });
        }
        callback();
    });
};
exports.copyFileCp = copyFileCp;
const waitWhileCondition = (whileCondition) => __awaiter(void 0, void 0, void 0, function* () {
    const started = Date.now();
    const timeout = 10000;
    while (whileCondition()) {
        if (Date.now() - started >= timeout) {
            console.error(`${common_1.packageLog} Could not write all attachments in ${timeout}ms`);
            break;
        }
        yield (0, common_1.delay)(100);
    }
});
exports.waitWhileCondition = waitWhileCondition;
const copyAttachments = (attachments, watchPath, allureResultFile) => __awaiter(void 0, void 0, void 0, function* () {
    let attachsDone = 0;
    const allureResults = (0, path_1.dirname)(allureResultFile);
    attachments.forEach(attach => {
        const attachTo = `${watchPath}/${attach.source}`;
        const attachFrom = `${allureResults}/${attach.source}`;
        (0, exports.copyFileCp)(attachFrom, attachTo, true, () => {
            attachsDone = attachsDone + 1;
        });
    });
    yield (0, exports.waitWhileCondition)(() => attachsDone < attachments.length);
});
exports.copyAttachments = copyAttachments;
const copyTest = (testFile, watchPath) => __awaiter(void 0, void 0, void 0, function* () {
    let testsDone = 0;
    const to = `${watchPath}/${(0, path_1.basename)(testFile)}`;
    // do not remove for understanding how containers connected to tests
    (0, exports.copyFileCp)(testFile, to, false, () => {
        testsDone = testsDone + 1;
    });
    yield (0, exports.waitWhileCondition)(() => testsDone < 1);
});
exports.copyTest = copyTest;
const writeResultFile = (resultContainer, content, callBack) => {
    (0, fs_1.writeFile)(resultContainer, content, errWrite => {
        if (errWrite) {
            log(`error test file  ${errWrite.message} `);
            return;
        }
        log(`write test file done ${resultContainer} `);
        callBack();
    });
};
exports.writeResultFile = writeResultFile;
